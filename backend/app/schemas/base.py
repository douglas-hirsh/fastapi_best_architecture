#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from pydantic import BaseModel, ConfigDict, EmailStr, validate_email
from pydantic_extra_types.phone_numbers import PhoneNumber

# Custom verification error messages do not contain the expected validation content.(also means input content) ,Supported expected content field, please refer to the following link.
# https://github.com/pydantic/pydantic-core/blob/a5cb7382643415b716b1a7a5392914e50f726528/tests/test_errors.py#L266
# Replace expected content field method,reference
# https://github.com/pydantic/pydantic/blob/caa78016433ec9b16a973f92f187a7b6bfde6cb5/docs/errors/errors.md?plain=1#L232
CUSTOM_VALIDATION_ERROR_MESSAGES = {
    'arguments_type': 'Parameter type input error.',
    'assertion_error': 'Assertion execution error.',
    'bool_parsing': 'Boolean input parsing error',
    'bool_type': 'Boolean type input error',
    'bytes_too_long': 'Byte length input is too long.',
    'bytes_too_short': 'Byte length input is too short.',
    'bytes_type': 'Byte type input error',
    'callable_type': 'Callable object input error',
    'dataclass_exact_type': 'Data class instance type input error',
    'dataclass_type': 'Data type input error',
    'date_from_datetime_inexact': 'Date quantity input non-zero',
    'date_from_datetime_parsing': 'Date input parsing error',
    'date_future': 'Date input is not in the future tense.',
    'date_parsing': 'Date input validation error',
    'date_past': 'Date input is not in the past tense.',
    'date_type': 'Incorrect date entry',
    'datetime_future': 'Date and time input is not future time.',
    'datetime_object_invalid': 'Invalid date time input object',
    'datetime_parsing': 'Date and time input parsing error',
    'datetime_past': 'Date and time input is not a past time',
    'datetime_type': 'Incorrect input for date and time type',
    'decimal_max_digits': 'Too many decimal places entered',
    'decimal_max_places': 'Decimal place input error.',
    'decimal_parsing': 'Decimal input parsing error',
    'decimal_type': 'Decimal type input error.',
    'decimal_whole_digits': 'Decimal place input error.',
    'dict_type': 'Dictionary type input error',
    'enum': 'Enumeration member input error,Allow {expected}',
    'extra_forbidden': 'prohibit',
    'finite_number': 'Limited value input error',
    'float_parsing': 'Floating point number input parsing error',
    'float_type': 'Floating point number type input error',
    'frozen_field': 'Freeze',
    'frozen_instance': 'Freeze instance, prohibit modification.',
    'frozen_set_type': 'Freeze type input prohibited',
    'get_attribute_error': 'Get property error',
    'greater_than': 'Input value is too large.',
    'greater_than_equal': 'Input value is too large.or equal',
    'int_from_float': 'Integer type input error',
    'int_parsing': 'Integer input parsing error',
    'int_parsing_size': 'Integer input parsing length error',
    'int_type': 'Integer type input error',
    'invalid_key': 'Invalid key value',
    'is_instance_of': 'Type instance input error',
    'is_subclass_of': 'Input error of type subclass',
    'iterable_type': 'Iterable type input error',
    'iteration_error': 'Iterative value input error',
    'json_invalid': 'JSON String input error',
    'json_type': 'JSON Type input error',
    'less_than': 'Input value too small.',
    'less_than_equal': 'Input value too small.or equal',
    'list_type': 'ListType input error',
    'literal_error': 'The translation is: "Literal value input error"',
    'mapping_type': 'MappingType input error',
    'missing': 'Missing required field',
    'missing_argument': 'Missing parameters',
    'missing_keyword_only_argument': 'Missing keyword argument',
    'missing_positional_only_argument': 'Missing positional argument',
    'model_attributes_type': 'Model attributeType input error',
    'model_type': 'Model instance input error',
    'multiple_argument_values': 'Too many parameter values entered',
    'multiple_of': 'Input value is not a multiple',
    'no_such_attribute': 'Invalid attribute value assignment',
    'none_required': 'The input value must be None',
    'recursion_loop': 'Input loop assignment',
    'set_type': 'assembleType input error',
    'string_pattern_mismatch': 'String constraint pattern input mismatch"',
    'string_sub_type': 'String subtype(non-strict instance) Input error',
    'string_too_long': 'String input is too long.',
    'string_too_short': 'String input is too short.',
    'string_type': 'stringType input error',
    'string_unicode': 'String input is not Unicode',
    'time_delta_parsing': 'Time difference input parsing error',
    'time_delta_type': 'Time differenceType input error',
    'time_parsing': 'Time input parsing error',
    'time_type': 'timeType input error',
    'timezone_aware': 'Missing time zone input information',
    'timezone_naive': 'Prohibit time zone input information.',
    'too_long': 'Input too long',
    'too_short': 'Too short.',
    'tuple_type': 'tupleType input error',
    'unexpected_keyword_argument': 'Enter unexpected keyword arguments',
    'unexpected_positional_argument': 'Unexpected positional arguments entered',
    'union_tag_invalid': 'UnitedtypeThe translation is: "Literal value input error"',
    'union_tag_not_found': 'Union type parameter input not found.',
    'url_parsing': 'URL Input parsing error',
    'url_scheme': 'URL Input error',
    'url_syntax_violation': 'URL Input grammar error',
    'url_too_long': 'URL Input too long',
    'url_type': 'URL Type input error',
    'uuid_parsing': 'UUID Input parsing error',
    'uuid_type': 'UUID Type input error',
    'uuid_version': 'UUID VersionType input error',
    'value_error': 'valueInput error',
}

CUSTOM_USAGE_ERROR_MESSAGES = {
    'class-not-fully-defined': 'Class attribute type is not fully defined.',
    'custom-json-schema': '__modify_schema__ methodV2No longer in use.',
    'decorator-missing-field': 'Defined an invalid field validator',
    'discriminator-no-field': 'Discriminator field undefined all',
    'discriminator-alias-type': 'Differentiator field is defined using a non-string type.',
    'discriminator-needs-literal': 'discriminator fields need to be defined using literal values',
    'discriminator-alias': 'Inconsistent definition of discriminator field alias.',
    'discriminator-validator': 'discriminator field disallows defining field validator',
    'model-field-overridden': 'No type-defined fields are allowed to be overwritten.',
    'model-field-missing-annotation': 'Missing field type definition',
    'config-both': 'Duplicate defined configuration item',
    'removed-kwargs': 'Invoke the removed keyword configuration parameter.',
    'invalid-for-json-schema': 'invalid JSON type',
    'base-model-instantiated': 'Prohibition of instantiating base models',
    'undefined-annotation': 'LacktypeDefinition',
    'schema-for-unknown-type': 'unknowntypeDefinition',
    'create-model-field-definitions': 'Field definition error',
    'create-model-config-base': 'Configuration item definition error.',
    'validator-no-fields': 'The field validator does not specify the field.',
    'validator-invalid-fields': 'Field validatorField definition error',
    'validator-instance-method': 'Field validator must be a class method.',
    'model-serializer-instance-method': 'The serializer must be an instance method',
    'validator-v1-signature': 'V1Field validator error has been deprecated.',
    'validator-signature': 'Field validator signature error.',
    'field-serializer-signature': 'Field serializer signature cannot be recognized.',
    'model-serializer-signature': 'Model serializer signature cannot be recognized.',
    'multiple-field-serializers': 'Repeated definition of field serializer.',
    'invalid_annotated_type': 'invalidtypeDefinition',
    'type-adapter-config-unused': 'typeAdapterConfiguration item definition error.',
    'root-model-extra': 'Root models prohibit defining additional fields.',
}


class CustomPhoneNumber(PhoneNumber):
    default_region_code = 'CN'


class CustomEmailStr(EmailStr):
    @classmethod
    def _validate(cls, __input_value: str) -> str:
        return None if __input_value == '' else validate_email(__input_value)[1]


class SchemaBase(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
